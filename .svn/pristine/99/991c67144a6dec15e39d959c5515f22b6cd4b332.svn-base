package us.bridgeses.Minder;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.sqlite.SQLiteDatabase;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Vibrator;
import android.view.View;
import android.view.WindowManager;
import android.widget.TextView;

import com.google.android.gms.maps.model.LatLng;

import java.util.Calendar;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;


public class AlarmScreen extends Activity {

    private ReminderDBHelper dbHelper = ReminderDBHelper.getInstance(this);
    private Reminder reminder;
    private Ringtone ringtone;
    private Vibrator vibrator;
    private ScheduledExecutorService scheduleTaskExecutor;

    private Boolean isAtLocation(LatLng location, int radius){
        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
	    Criteria criteria = new Criteria();
	    criteria.setAccuracy(Criteria.ACCURACY_FINE);
	    String bestProvider = locationManager.getBestProvider(criteria,true);
        Location curLocation = locationManager.getLastKnownLocation(bestProvider);

	    long timeDelta = Calendar.getInstance().getTimeInMillis() - curLocation.getTime();

	    if ((timeDelta > (Reminder.MINUTE * 5))||curLocation.getAccuracy() > 1.5*radius) {
		    //TODO: Get fresh location
	    }
	    else {
		    float results[] = new float[1];
		    Location.distanceBetween(curLocation.getLatitude(),curLocation.getLongitude(),location.latitude,location.longitude,results);
		    return results[1] <= radius;
	    }

        return false;
    }

	private void createScreen() {
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON |
				WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD |
				WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
				WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
		setContentView(R.layout.activity_alarm_screen);

		TextView titleText = (TextView) findViewById(R.id.fullscreen_name);
		TextView descriptionText = (TextView) findViewById(R.id.fullscreen_description);
		titleText.setText(reminder.getName());
		descriptionText.setText(reminder.getDescription());
		if (reminder.getVibrate()) {
			vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);
			if (vibrator.hasVibrator()) {
				vibrator.vibrate(1000);
			}
		}
		if (!reminder.getRingtone().equals("")) {
			ringtone = RingtoneManager.getRingtone(this.getApplicationContext(), Uri.parse(reminder.getRingtone()));
			ringtone.play();
		}
		scheduleTaskExecutor = Executors.newScheduledThreadPool(2);
		scheduleTaskExecutor.schedule(new Runnable() {
			public void run() {
				snooze(reminder.getSnoozeDuration()+5*Reminder.MINUTE);
			}

		}, 5, TimeUnit.MINUTES);
	}

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        SQLiteDatabase database = dbHelper.openDatabase();

        Boolean locationSatisfied = true;

        Intent intent = getIntent();
        int id = intent.getIntExtra("Id",-1);

        if (id == -1){
            finish();
        }

        reminder = Reminder.getReminder(database,id);

        dbHelper.closeDatabase();

        if (reminder.getOnlyAtLocation()){
            locationSatisfied = isAtLocation(reminder.getLocation(), reminder.getRadius());
        }

        if (reminder.getUntilLocation()){
            locationSatisfied = !isAtLocation(reminder.getLocation(), reminder.getRadius());
        }

        if (locationSatisfied) {
            createScreen();
        }
	    else
	        snooze(reminder.getSnoozeDuration());

    }


    public void dismiss(View view) {
        if (!reminder.getRingtone().equals("")) {
            ringtone.stop();
        }
        if (reminder.getVibrate()) {
            vibrator.cancel();
        }
        scheduleTaskExecutor.shutdownNow();
        finish();
    }

    public void snooze(int duration) {
        Intent intentAlarm = new Intent(this, ReminderReceiver.class);//Create alarm intent
        intentAlarm.putExtra("Id", reminder.getId());           //Associate intent with specific reminder
        intentAlarm.putExtra("Snooze",1);

        SharedPreferences preferences = getSharedPreferences(Reminder.PREFS_NAME, 0);
        SharedPreferences.Editor editor = preferences.edit();
        editor.putInt("Snooze",reminder.getId());
        editor.apply();

        AlarmManager alarmManager = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);
        alarmManager.set(AlarmManager.RTC_WAKEUP,
                reminder.getDate().getTimeInMillis() + duration,
                PendingIntent.getBroadcast(this, 2, intentAlarm, PendingIntent.FLAG_UPDATE_CURRENT));
        if (reminder.getVibrate()) {
            vibrator.cancel();
        }
        if (!reminder.getRingtone().equals("")) {
            ringtone.stop();
        }
        scheduleTaskExecutor.shutdownNow();
        finish();
    }

    public void snoozeButton(View view) {
        snooze(reminder.getSnoozeDuration());
    }
}
