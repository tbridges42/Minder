package us.bridgeses.Minder;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.FragmentManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.preference.PreferenceManager;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;


public class EditReminder extends Activity implements DeleteDialogFragment.NoticeDialogListener{

    Reminder reminder;
    ReminderPreferenceFragment mFragment;
    private static final String TAG_TASK_FRAGMENT = "task_fragment";

    @Override
    public void onDialogNegativeClick(DialogFragment dialog) {

    }

    @Override
    public void onDialogPositiveClick(DialogFragment dialog) {
        Intent intentAlarm = new Intent(this, ReminderReceiver.class);      //Create alarm intent
        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        alarmManager.cancel(PendingIntent.getBroadcast(this, 1, intentAlarm,
                PendingIntent.FLAG_UPDATE_CURRENT));

        ReminderDBHelper dbHelper = ReminderDBHelper.getInstance(this);
        SQLiteDatabase database = dbHelper.openDatabase();
        Reminder.deleteReminder(database,reminder.getId());
        String toastText = "Reminder deleted";
        int duration = Toast.LENGTH_SHORT;
        Toast toast = Toast.makeText(getApplicationContext(), toastText, duration);
        toast.show();
        NavUtils.navigateUpFromSameTask(this);
    }

    public void delete(View view) {
        DeleteDialogFragment df = new DeleteDialogFragment();
        df.show(getFragmentManager(),"DeleteDialogFragment");
    }

    private void setDaysOfWeek(SharedPreferences sharedPreferences, Reminder reminder) {
        byte daysOfWeek = 0;
        if (sharedPreferences.getBoolean("temp_sunday",false)) {
            daysOfWeek += Reminder.SUNDAY;
        }
        if (sharedPreferences.getBoolean("temp_monday",false)) {
            daysOfWeek += Reminder.MONDAY;
        }
        if (sharedPreferences.getBoolean("temp_tuesday",false)) {
            daysOfWeek += Reminder.TUESDAY;
        }
        if (sharedPreferences.getBoolean("temp_wednesday",false)) {
            daysOfWeek += Reminder.WEDNESDAY;
        }
        if (sharedPreferences.getBoolean("temp_thursday",false)) {
            daysOfWeek += Reminder.THURSDAY;
        }
        if (sharedPreferences.getBoolean("temp_friday",false)) {
            daysOfWeek += Reminder.FRIDAY;
        }
        if (sharedPreferences.getBoolean("temp_saturday",false)) {
            daysOfWeek += Reminder.SATURDAY;
        }
        reminder.setDaysOfWeek(daysOfWeek);
    }

    public void save(View view){
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        reminder.setName(sharedPreferences.getString("temp_name",""));
        reminder.setDescription(sharedPreferences.getString("temp_description", ""));
        Calendar date = Calendar.getInstance();
        SimpleDateFormat timeFormat = new SimpleDateFormat("h:mm aa EEEE, MMMM d, yyyy");
        try {
            String newDate = sharedPreferences.getString("temp_time", "") + " " + sharedPreferences.getString("temp_date", "");
            date.setTime(timeFormat.parse(newDate));
        }
        catch (ParseException e){
            Log.e("Minder","Parse Error");
        }

        long time = date.getTimeInMillis();                             //Drop seconds
        time = time/60000;                                              //
        time = time*60000;                                              //
        date.setTimeInMillis(time);                                     //
        reminder.setDate(date);                                         //Store reminder date + time
        reminder.setRepeatType(Integer.parseInt(sharedPreferences.getString("temp_repeat_type", "0")));
        switch (reminder.getRepeatType()) {
            case 1: {
                reminder.setRepeatLength(Integer.parseInt(sharedPreferences.getString("temp_days", "1")));
                break;
            }
            case 2: {
                reminder.setRepeatLength(Integer.parseInt(sharedPreferences.getString("temp_weeks", "1")));
                setDaysOfWeek(sharedPreferences,reminder);
                break;
            }
            case 3: {
                reminder.setRepeatLength(Integer.parseInt(sharedPreferences.getString("temp_months", "1")));
                reminder.setMonthType((byte) Integer.parseInt(sharedPreferences.getString("temp_monthly_type","0")));
                break;
            }
            case 4: {
                reminder.setRepeatLength(Integer.parseInt(sharedPreferences.getString("temp_years", "1")));
                break;
            }
        }
        reminder.setVibrate(sharedPreferences.getBoolean("temp_vibrate", true));
        reminder.setRingtone(sharedPreferences.getString("temp_ringtone", ""));
        ReminderDBHelper dbHelper = ReminderDBHelper.getInstance(this);
        SQLiteDatabase database = dbHelper.openDatabase();



        reminder.setActive(reminder.getDate().after(Calendar.getInstance()));

        reminder.setId( (int) Reminder.saveReminder(database,reminder));    //Save reminder to database

        Reminder nextReminder = Reminder.getNextReminder(database);         //Get the next alarm

        if (nextReminder.getId() != -1) {
            Intent intentAlarm = new Intent(this, ReminderReceiver.class);      //Create alarm intent
            intentAlarm.putExtra("Id", nextReminder.getId());                    //Associate intent with specific reminder

            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
            SharedPreferences.Editor editor = preferences.edit();
            editor.putInt("Alarm", nextReminder.getId());
            editor.apply();

            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
            alarmManager.set(AlarmManager.RTC_WAKEUP, nextReminder.getDate().getTimeInMillis(), PendingIntent.getBroadcast(this, 1, intentAlarm, PendingIntent.FLAG_UPDATE_CURRENT));
        }

        Context context = getApplicationContext();
        String toastText = "Reminder saved";
        int duration = Toast.LENGTH_SHORT;
        Toast toast = Toast.makeText(context, toastText, duration);
        toast.show();                                               //Let the user know everything went fine
        dbHelper.closeDatabase();
        NavUtils.navigateUpFromSameTask(this);
    }

    public void cancel(View view){
        NavUtils.navigateUpFromSameTask(this);
    }

    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        Log.e("Minder","Activity Configuration Changed");
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_preference_test);

        Intent intent = getIntent();
        Bundle incoming = intent.getExtras();
        if (incoming != null) {
            reminder = incoming.getParcelable("Reminder");
            if (reminder.getId()==-1){
                reminder = new Reminder();
            }
        }
        else
            reminder = new Reminder();

        ReminderPreferenceFragment fragment = ReminderPreferenceFragment.newInstance(reminder);
        FragmentManager fragmentManager = getFragmentManager();
        mFragment = (ReminderPreferenceFragment) fragmentManager.findFragmentByTag(TAG_TASK_FRAGMENT);

        if (mFragment == null) {
            fragmentManager.beginTransaction().replace(R.id.reminder_frame, fragment,TAG_TASK_FRAGMENT).commit();
        }
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.preference_test, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}
